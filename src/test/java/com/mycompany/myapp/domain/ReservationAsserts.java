package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReservationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationAllPropertiesEquals(Reservation expected, Reservation actual) {
        assertReservationAutoGeneratedPropertiesEquals(expected, actual);
        assertReservationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationAllUpdatablePropertiesEquals(Reservation expected, Reservation actual) {
        assertReservationUpdatableFieldsEquals(expected, actual);
        assertReservationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationAutoGeneratedPropertiesEquals(Reservation expected, Reservation actual) {
        assertThat(expected)
            .as("Verify Reservation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationUpdatableFieldsEquals(Reservation expected, Reservation actual) {
        assertThat(expected)
            .as("Verify Reservation relevant properties")
            .satisfies(e -> assertThat(e.getReservationID()).as("check reservationID").isEqualTo(actual.getReservationID()))
            .satisfies(e -> assertThat(e.getRequestedTime()).as("check requestedTime").isEqualTo(actual.getRequestedTime()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()))
            .satisfies(e -> assertThat(e.getWaitTime()).as("check waitTime").isEqualTo(actual.getWaitTime()))
            .satisfies(e -> assertThat(e.getDriverRating()).as("check driverRating").isEqualTo(actual.getDriverRating()))
            .satisfies(e -> assertThat(e.getCustomerRating()).as("check customerRating").isEqualTo(actual.getCustomerRating()))
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getTripCost()).as("check tripCost").isEqualTo(actual.getTripCost()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationUpdatableRelationshipsEquals(Reservation expected, Reservation actual) {
        assertThat(expected)
            .as("Verify Reservation relationships")
            .satisfies(e -> assertThat(e.getInsurance()).as("check insurance").isEqualTo(actual.getInsurance()))
            .satisfies(e -> assertThat(e.getPickupLocation()).as("check pickupLocation").isEqualTo(actual.getPickupLocation()))
            .satisfies(e -> assertThat(e.getDropoffLocation()).as("check dropoffLocation").isEqualTo(actual.getDropoffLocation()))
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()))
            .satisfies(e -> assertThat(e.getDriver()).as("check driver").isEqualTo(actual.getDriver()))
            .satisfies(e -> assertThat(e.getVehicle()).as("check vehicle").isEqualTo(actual.getVehicle()))
            .satisfies(e -> assertThat(e.getRate()).as("check rate").isEqualTo(actual.getRate()))
            .satisfies(e -> assertThat(e.getPayment()).as("check payment").isEqualTo(actual.getPayment()));
    }
}
